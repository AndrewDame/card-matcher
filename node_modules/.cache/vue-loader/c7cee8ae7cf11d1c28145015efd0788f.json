{"remainingRequest":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrewdame/Desktop/repos/card-matcher/src/components/Game.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/andrewdame/Desktop/repos/card-matcher/src/components/Game.vue","mtime":1609047360050},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5HYW1lIHsKICAgIGRpc3BsYXk6IHRhYmxlOwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBtaW4taGVpZ2h0OiAxMDB2aDsKICAgIGJhY2tncm91bmQtY29sb3I6ICMxNzE3MTc7CiAgICBjb2xvcjogIzAwMDsKICAgIGxpbmUtaGVpZ2h0OiAxLjY7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC44czsKCiAgICAmLS1zdWNjZXNzIHsKICAgIGJhY2tncm91bmQ6IGdyZWVuICFpbXBvcnRhbnQ7CiAgICB9Cgp9Cgo="},{"version":3,"sources":["Game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"Game.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div \n    class=\"Game\"\n    v-bind:class=\"{\n      'Game--success': isSuccess && isGameCompleted,\n    }\"\n  >\n    <Message :status=\"isGameCompleted\" :isSuccess=\"isSuccess\"/>\n    <StatusBar :status=\"isGameCompleted\" />\n    <Background :isSuccess=\"isSuccess\"/>\n    <CardContainer />\n  </div>\n</template>\n\n<script>\nimport CardContainer from './CardContainer.vue';\nimport Background from './Background.vue';\nimport Message from './Message.vue'\nimport StatusBar from './StatusBar.vue'\nimport { mapMutations, mapState, mapActions } from 'vuex'\n\nexport default {\n  name: 'Game',\n  components: {\n    CardContainer,\n    Background,\n    Message,\n    StatusBar,\n  },\n  methods: {\n    ...mapMutations(['setCardList', 'setFlippedStatusList', 'toggleCard', 'toggleVisibility', 'setVisibilityList', 'setProgressStatus', 'setLoosingLifeStatus', 'decreaseLives', 'setGameCompletedStatus']),\n    ...mapActions(['initializeGame'])\n  },\n  computed: {\n    ...mapState({\n      numFlippedCards: state => { \n              let redFunc = (acc, currentValue) =>  (currentValue === true? acc + 1 : acc);\n              return state.flippedStatusList.reduce(redFunc, 0);\n      },\n      flippedCardList: state => {\n        let cardList = []\n        state.flippedStatusList.forEach((elem, index) => {\n          if (elem) {\n            cardList.push(index);\n          }\n        });\n        return cardList;\n      },\n      isSuccess: state => {\n        let redFunc = (acc, currentValue) => (acc === false? acc : !currentValue);\n        return state.visibilityList.reduce(redFunc, true) && !state.checkInProgress;\n      },\n      checkInProgress: state => state.checkInProgress,\n      isGameCompleted: state => state.gameCompleted,\n      lives: state => state.lives,\n    }),\n  },\n  mounted: function() {\n    if (!this.$store.state.gameInitialized) {\n      this.$router.push({ name: 'Welcome'});\n    }\n  },\n  watch: {\n    numFlippedCards: function () {\n      if (this.numFlippedCards === 2) {\n        this.setProgressStatus(true);\n        let flippedIndicies = [...this.flippedCardList];\n        if (this.$store.state.cardList[flippedIndicies[0]] === this.$store.state.cardList[flippedIndicies[1]]) {\n          let maxIndex = Math.max(...flippedIndicies);\n          flippedIndicies = flippedIndicies.filter(num => num != maxIndex);\n          setTimeout((index1, index2) => {\n            this.toggleVisibility(index1);\n            this.toggleVisibility(index2);\n            setTimeout((index1, index2) => {\n              this.toggleCard(index1);\n              this.toggleCard(index2);\n              this.setProgressStatus(false);\n              if (this.isSuccess) {\n                this.setGameCompletedStatus(true);\n              }\n            }, 1000, index1, index2)\n          }, 1200, maxIndex, flippedIndicies[0]);\n        } else {\n          setTimeout(() => {\n            this.setLoosingLifeStatus(true);\n            this.decreaseLives();\n            this.toggleCard(flippedIndicies[0]);\n            this.toggleCard(flippedIndicies[1]);\n            setTimeout(() => {\n              this.setLoosingLifeStatus(false);\n              if (this.lives === 0) {\n                this.setGameCompletedStatus(true);\n              }\n              this.setProgressStatus(false);\n            }, 1500);\n          }, 1200);\n        }\n      }\n    },\n  }\n}\n\n</script>\n\n<style lang=\"scss\">\n\n.Game {\n    display: table;\n    width: 100%;\n    height: 100%;\n    min-height: 100vh;\n    background-color: #171717;\n    color: #000;\n    line-height: 1.6;\n    position: relative;\n    font-family: sans-serif;\n    overflow: hidden;\n    transition: background-color .8s;\n\n    &--success {\n    background: green !important;\n    }\n\n}\n\n</style>"]}]}