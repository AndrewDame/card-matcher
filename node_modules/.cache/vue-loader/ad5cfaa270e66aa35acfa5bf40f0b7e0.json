{"remainingRequest":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/src/Game.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/src/Game.vue","mtime":1608699464987},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewdame/Desktop/repos/card-matcher/card-matcher/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKKiB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0K"},{"version":3,"sources":["Game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;AACA;AACA;AACA","file":"Game.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <CardContainer />\n  </div>\n</template>\n\n<script>\nimport CardContainer from './components/CardContainer.vue';\nimport generateCardList from './logic/gameInit.js';\nimport { mapMutations, mapState, mapActions } from 'vuex'\n\nexport default {\n  name: 'Game',\n  components: {\n    CardContainer\n  },\n  methods: {\n    ...mapMutations(['setCardList', 'setStatusList', 'toggleCard']),\n    ...mapActions(['removeCard']),\n  },\n  computed: mapState({\n    numFlippedCards: state => { \n            let redFunc = (acc, currentValue) =>  (currentValue === true? acc + 1 : acc);\n            return state.statusList.reduce(redFunc, 0);\n    },\n    flippedCardList: state => {\n      let cardList = []\n      state.statusList.forEach((elem, index) => {\n        if (elem) {\n          cardList.push(index);\n        }\n      });\n      return cardList;\n    }\n  }),\n  mounted: function() {\n    let statusList = [];\n    for (let i = 0; i < 6; ++i) {\n      statusList.push(false);\n    }\n    this.setStatusList(statusList);\n    this.setCardList(generateCardList());\n  },\n  watch: {\n    numFlippedCards: function () {\n      if (this.numFlippedCards === 2) {\n        setTimeout(() => {\n          let flippedIndicies = [...this.flippedCardList];\n          if (this.$store.state.cardList[flippedIndicies[0]] === this.$store.state.cardList[flippedIndicies[1]]) {\n            let maxIndex = Math.max(...flippedIndicies);\n            flippedIndicies = flippedIndicies.filter(num => num != maxIndex);\n            this.removeCard(maxIndex);\n            this.removeCard(flippedIndicies[0])\n          } else {\n              this.toggleCard(flippedIndicies[0]);\n              this.toggleCard(flippedIndicies[1]);\n          }\n        }, 1200);\n      }\n    }\n  }\n}\n\n</script>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n}\n</style>\n"]}]}